# bash prompt script using git
# Updated for Git 1.9.0
#
# IMPORTANT: Source the git bash completion script prior to this one
# (On CentOS: /etc/bash_completion.d/git)

   RED="\[\033[0;31m\]"
 GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
  BLUE="\[\033[0;34m\]"
COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository
function is_git_repository {
    git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository
function set_git_branch {
    # Capture the output of the "git status" command
    git_status="$(git status 2> /dev/null)"

    # Set color based on clean/staged/dirty
    if [[ ${git_status} =~ Changed\ but\ not\ updated ]]; then
        state="${RED}"
    elif [[ ${git_status} =~ Changes\ not\ staged\ for\ commit ]]; then
        state="${RED}"
    elif [[ ${git_status} =~ Untracked\ files ]]; then
        state="${RED}"
    elif [[ ${git_status} =~ Unmerged\ paths ]]; then
        state="${RED}"
    elif [[ ${git_status} =~ Changes\ to\ be\ committed ]]; then
        state="${YELLOW}"
    elif [[ ${git_status} =~ working\ (directory|tree)\ clean ]]; then
        state="${GREEN}"
    else
        state=""
    fi

    # Set arrow icon based on status against remote
    remote_pattern="Your branch is ([^${IFS}]*) "
    diverge_pattern="Your branch and .* have diverged"
    remote=""
    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
            # echo -e "\xE2\x86\x91"
            remote="↑"
        elif [[ ${BASH_REMATCH[1]} == "behind" ]]; then
            # echo -e "\xE2\x86\x93"
            remote="↓"
        fi
    elif [[ ${git_status} =~ ${diverge_pattern} ]]; then
        # echo -e "\xE2\x86\x95"
        remote="↕"
    fi

    # Get name of the branch
    branch_pattern="On branch ([^${IFS}]*)"
    detached_pattern="HEAD detached (at|from) ([^${IFS}]*)"
    no_branch_pattern="Not currently on any branch"
    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch=${BASH_REMATCH[1]}
    elif [[ ${git_status} =~ ${detached_pattern} ]]; then
        branch="detached ${BASH_REMATCH[1]}:${BASH_REMATCH[2]}"
    elif [[ ${git_status} =~ ${no_branch_pattern} ]]; then
        branch="no branch"
    else
        branch='?'
    fi

    # Set the final branch string
    BRANCH=" ${state}(${branch})${remote}${COLOR_NONE}"
}

# Return the prompt symbol to be used, colorization based on the return value of
# the previous command
function set_prompt_symbol() {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="\$"
    else
        PROMPT_SYMBOL="${RED}\$${COLOR_NONE}"
    fi
}

# Set the full bash prompt
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?

    # Set the BRANCH variable
    if is_git_repository ; then
        set_git_branch
    else
        BRANCH=''
    fi

    # Set the bash prompt variable
    PS1="[\u@\h \W${BRANCH}]${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

